Computer Networks Lab
Assignment 5 - Documentation
                                                
Group member 1 Name: Anish Datta
Group member 1 Roll No.: 21CS30006
Group member 2 Name: Aviral Pandey
Group member 2 Roll No.: 21CS10089


Working of the code:


msocket.h: Contains definitions of all the structs, macros and functions

Structs and their members:

1. Window:
        * window_size: Maximum number of extra messages that can be sent without receiving ACK (for sender window) and the number of messages after last received in-order message, expected to be received (for receiver window)
        * seqnum: Array of message sequence numbers send but not yet acknowledged (for sender window) and the sequence numbers expected to be received next (for receiver window)
        * seqnumLen: Number of messages in the window, that is length of array seqnum
        * lastseqnum: Sequence number of the last in-order message acknowledged(for sender)/received(for receiver)
        * highestseqnum: Highest(in a cyclic manner) Sequence number message received so far
2. bufItem:
        * message: char array storing the message content
        * time: time when the message was last sent
        * seq_num: Sequence number of the message (0 to 15). Note that 2^4 = 16 and 2^(4-1) = 8 and our window size is 5(<8), hence 0 to 15 taken to be a safe numbering range for this selective repeat ARQ implementation.
        * free: Boolean variable indicating whether this buffer slot is free or not (1 if slot free, 0 otherwise)
3. socketStruct:
        * free: Boolean variable indicating whether this SM table slot is free or not for socket(1 if slot free, 0 otherwise)
        * pid: pid of the process which created the socket
        * sockfd: UDP socked id of the socket created
        * ip: ip of the other side socket to which this socket is connected to
        * port: port number of the other side socket to which this socket is connected to
        * sendBuf: Sender side buffer (array of bufItem of size 10)
        * recvBuf: Receiver side buffer (array of bufItem of size 5)
        * swnd: Sender side window
        * rwnd: Receiver side window
        * lastseqnum: Sequence number of the last in-order message extracted from the receiver buffer (Used by m_recvfrom for extracting messages in correct order in the receiver buffer to be delivered to the user application)
        * currseqnum: Sequence number of the last message put in the sender window from the sender buffer (Used by m_sendto), used for in-order pushing to buffer
        * nospace: boolean value indicating whether receive buffer is full (1 if full, 0 otherwise)
4. socketInfo: Struct for proper synchronization of socket creation and binding (as mentioned in the correction mail)
        * sockfd
        * ip
        * port
        * error

Macros:

        * SOCK_MTP: Custom socket type for MTP sockets
        * MAX_SOCKETS: Maximum number of active MTP sockets
        * SEND_BUF_SIZE: Sender buffer size
        * RECV_BUF_SIZE: Receiver buffer size
        * T: Message timeout period
        * DROP_PROBABILITY: Probability that a message received will be dropped


msocket.c: Contains implementations of the MTP socket function calls and the drop probability function

Functions and their description:

        * int m_socket(int domain, int type, int protocol, pid_t pid): Finds a free slot in the SM table. If found, it properly initializes all the corresponding members(except sockfd, ip and port) of that slot. Then it fills in the sockfd as received by the SOCK_INFO struct (delivered by initmsocket.c where the actual UDP socket call is made)
        * int m_bind(int sockid, char *source_IP, int source_port, char *dest_IP, int dest_port): Fills in the ip and port of the sockid entry in SM table with dest_IP and dest_port respectively after properly synchronizing with the SOCK_INFO struct (source_IP and source_port)
        * int m_recvfrom(int m_socket, char *buf, int len, int flags): Finds the corresponding socket entry in SM and fills its receive buffer with the received message in buf in proper order(after finding a free slot in the buffer). Also handles the error cases like socket not found, no message available.
        * int m_sendto(int sockid, char *buf, int len, int flags, char *dest_IP, int dest_port): Finds a free slot in the sender buffer and fills it with the message in buf to be sent. Also handles error cases like incorrect dest_IP/dest_port supplied, no buffer space available.
        * int dropMessage(float p): Generates a random number between 0 and 1. Return 1 if the generated number < p, 0 otherwise.


initmsocket.c: Contains the R, S and garbage threadsâ€™ implementation.

Functions and their description:

        * main: Contains initialisation of shared memory segments(SM and SOCK_INFO) and the semaphores (Total 4 semaphores used: semid1 and semid2 for sync between initmsocket.c and msocket.c during socket creation and binding (as mentioned in the correction mail), mutid1 for accessing the shared memory segments, mutid2 for sync between m_socket and m_bind function calls). Also creates the receiver, sender and garbage threads. Makes the UDP socket and bind calls in a while(1) loop as and when needed using semaphores. 
        * receiver: Monitors all the sockets in the SM table for any received message using the select call. If any message is received and is not dropped, it processes it accordingly depending on whether it is a data message or an ACK message. Sends required ACK message (proper/duplicate) as required. Majority of the bufItem and window struct members are maintained here. Actual recvfrom and sendto calls are made here.
        * sender: Sleeps periodically for 2 (<T/2) seconds, then wakes up and performs required resend and send operations using sendto call. For resend, it finds out the max time of the send messages in the sender window and checks if current time - max time > T. If so, it resends all the messages in the window. For send, it scans the buffer and checks if any message is not in the window but can be sent. If so, it sends it and adds it to the send window.
        * garbage: Periodically wakes up and clean up the corresponding entry in the MTP socket if the corresponding process is killed and the socket has not been closed explicitly.
        * terminate: Custom signal handler for the SIGINT signal (For getting the stats on number of messages send and the number of acks sent)


user1.c: user file that sends the data in chunks of 1024 characters. If unable to store in send buffer due to lack of space, tries again. It waits on a mutex till receiving user file has created socket and made bind call before sending. Sends a final "." message to denote end of file.

user2.c: user file that receives the data in chunks of 1024 characters. If message not found in receive buffer, tries again. It signals the mutex after socket and bind call, so user1 can proceed. Terminates when receives ".".


Results:

Probability 	Number of messages sent 	Average rate 	Number of ACKs sent
0.05       	38				1.73		32
0.1		45				2.05		35
0.15		44				2.0		33
0.2		42				1.91		26
0.25		49				2.23		31
0.30		55				2.5		42
0.35		58				2.64		39
0.4		65				2.95		44
0.45		77				3.5		47
0.5		95				4.32		57
